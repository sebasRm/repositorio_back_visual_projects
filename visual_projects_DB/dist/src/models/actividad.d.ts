import * as Sequelize from 'sequelize';
import { Model, Optional } from 'sequelize';
import type { estado, estadoId } from './estado';
import type { meta, metaId } from './meta';
import type { recurso, recursoId } from './recurso';
import type { responsable, responsableId } from './responsable';
import type { tarea, tareaId } from './tarea';
export interface actividadAttributes {
    idActividad: number;
    nombre?: string;
    descripcion?: string;
    presupuesto?: number;
    fechaInicio?: Date;
    FechaFinal?: Date;
    Estado_idEstado: number;
    Responsable_idResponsable: number;
    Meta_idMeta: number;
}
export type actividadPk = "idActividad";
export type actividadId = actividad[actividadPk];
export type actividadOptionalAttributes = "idActividad" | "nombre" | "descripcion" | "presupuesto" | "fechaInicio" | "FechaFinal";
export type actividadCreationAttributes = Optional<actividadAttributes, actividadOptionalAttributes>;
export declare class actividad extends Model<actividadAttributes, actividadCreationAttributes> implements actividadAttributes {
    idActividad: number;
    nombre?: string;
    descripcion?: string;
    presupuesto?: number;
    fechaInicio?: Date;
    FechaFinal?: Date;
    Estado_idEstado: number;
    Responsable_idResponsable: number;
    Meta_idMeta: number;
    recursos: recurso[];
    getRecursos: Sequelize.HasManyGetAssociationsMixin<recurso>;
    setRecursos: Sequelize.HasManySetAssociationsMixin<recurso, recursoId>;
    addRecurso: Sequelize.HasManyAddAssociationMixin<recurso, recursoId>;
    addRecursos: Sequelize.HasManyAddAssociationsMixin<recurso, recursoId>;
    createRecurso: Sequelize.HasManyCreateAssociationMixin<recurso>;
    removeRecurso: Sequelize.HasManyRemoveAssociationMixin<recurso, recursoId>;
    removeRecursos: Sequelize.HasManyRemoveAssociationsMixin<recurso, recursoId>;
    hasRecurso: Sequelize.HasManyHasAssociationMixin<recurso, recursoId>;
    hasRecursos: Sequelize.HasManyHasAssociationsMixin<recurso, recursoId>;
    countRecursos: Sequelize.HasManyCountAssociationsMixin;
    tareas: tarea[];
    getTareas: Sequelize.HasManyGetAssociationsMixin<tarea>;
    setTareas: Sequelize.HasManySetAssociationsMixin<tarea, tareaId>;
    addTarea: Sequelize.HasManyAddAssociationMixin<tarea, tareaId>;
    addTareas: Sequelize.HasManyAddAssociationsMixin<tarea, tareaId>;
    createTarea: Sequelize.HasManyCreateAssociationMixin<tarea>;
    removeTarea: Sequelize.HasManyRemoveAssociationMixin<tarea, tareaId>;
    removeTareas: Sequelize.HasManyRemoveAssociationsMixin<tarea, tareaId>;
    hasTarea: Sequelize.HasManyHasAssociationMixin<tarea, tareaId>;
    hasTareas: Sequelize.HasManyHasAssociationsMixin<tarea, tareaId>;
    countTareas: Sequelize.HasManyCountAssociationsMixin;
    Estado_idEstado_estado: estado;
    getEstado_idEstado_estado: Sequelize.BelongsToGetAssociationMixin<estado>;
    setEstado_idEstado_estado: Sequelize.BelongsToSetAssociationMixin<estado, estadoId>;
    createEstado_idEstado_estado: Sequelize.BelongsToCreateAssociationMixin<estado>;
    Meta_idMeta_metum: meta;
    getMeta_idMeta_metum: Sequelize.BelongsToGetAssociationMixin<meta>;
    setMeta_idMeta_metum: Sequelize.BelongsToSetAssociationMixin<meta, metaId>;
    createMeta_idMeta_metum: Sequelize.BelongsToCreateAssociationMixin<meta>;
    Responsable_idResponsable_responsable: responsable;
    getResponsable_idResponsable_responsable: Sequelize.BelongsToGetAssociationMixin<responsable>;
    setResponsable_idResponsable_responsable: Sequelize.BelongsToSetAssociationMixin<responsable, responsableId>;
    createResponsable_idResponsable_responsable: Sequelize.BelongsToCreateAssociationMixin<responsable>;
    static initModel(sequelize: Sequelize.Sequelize): typeof actividad;
}
//# sourceMappingURL=actividad.d.ts.map