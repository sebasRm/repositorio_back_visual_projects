import * as Sequelize from 'sequelize';
import { Model, Optional } from 'sequelize';
import type { actividad, actividadId } from './actividad';
import type { actividadplaneada, actividadplaneadaId } from './actividadplaneada';
import type { tarea, tareaId } from './tarea';
import type { tareaplaneada, tareaplaneadaId } from './tareaplaneada';
import type { usuario, usuarioId } from './usuario';
export interface responsableAttributes {
    idResponsable: number;
    Usuario_idUsuario: number;
}
export type responsablePk = "idResponsable";
export type responsableId = responsable[responsablePk];
export type responsableOptionalAttributes = "idResponsable";
export type responsableCreationAttributes = Optional<responsableAttributes, responsableOptionalAttributes>;
export declare class responsable extends Model<responsableAttributes, responsableCreationAttributes> implements responsableAttributes {
    idResponsable: number;
    Usuario_idUsuario: number;
    actividads: actividad[];
    getActividads: Sequelize.HasManyGetAssociationsMixin<actividad>;
    setActividads: Sequelize.HasManySetAssociationsMixin<actividad, actividadId>;
    addActividad: Sequelize.HasManyAddAssociationMixin<actividad, actividadId>;
    addActividads: Sequelize.HasManyAddAssociationsMixin<actividad, actividadId>;
    createActividad: Sequelize.HasManyCreateAssociationMixin<actividad>;
    removeActividad: Sequelize.HasManyRemoveAssociationMixin<actividad, actividadId>;
    removeActividads: Sequelize.HasManyRemoveAssociationsMixin<actividad, actividadId>;
    hasActividad: Sequelize.HasManyHasAssociationMixin<actividad, actividadId>;
    hasActividads: Sequelize.HasManyHasAssociationsMixin<actividad, actividadId>;
    countActividads: Sequelize.HasManyCountAssociationsMixin;
    actividadplaneadas: actividadplaneada[];
    getActividadplaneadas: Sequelize.HasManyGetAssociationsMixin<actividadplaneada>;
    setActividadplaneadas: Sequelize.HasManySetAssociationsMixin<actividadplaneada, actividadplaneadaId>;
    addActividadplaneada: Sequelize.HasManyAddAssociationMixin<actividadplaneada, actividadplaneadaId>;
    addActividadplaneadas: Sequelize.HasManyAddAssociationsMixin<actividadplaneada, actividadplaneadaId>;
    createActividadplaneada: Sequelize.HasManyCreateAssociationMixin<actividadplaneada>;
    removeActividadplaneada: Sequelize.HasManyRemoveAssociationMixin<actividadplaneada, actividadplaneadaId>;
    removeActividadplaneadas: Sequelize.HasManyRemoveAssociationsMixin<actividadplaneada, actividadplaneadaId>;
    hasActividadplaneada: Sequelize.HasManyHasAssociationMixin<actividadplaneada, actividadplaneadaId>;
    hasActividadplaneadas: Sequelize.HasManyHasAssociationsMixin<actividadplaneada, actividadplaneadaId>;
    countActividadplaneadas: Sequelize.HasManyCountAssociationsMixin;
    tareas: tarea[];
    getTareas: Sequelize.HasManyGetAssociationsMixin<tarea>;
    setTareas: Sequelize.HasManySetAssociationsMixin<tarea, tareaId>;
    addTarea: Sequelize.HasManyAddAssociationMixin<tarea, tareaId>;
    addTareas: Sequelize.HasManyAddAssociationsMixin<tarea, tareaId>;
    createTarea: Sequelize.HasManyCreateAssociationMixin<tarea>;
    removeTarea: Sequelize.HasManyRemoveAssociationMixin<tarea, tareaId>;
    removeTareas: Sequelize.HasManyRemoveAssociationsMixin<tarea, tareaId>;
    hasTarea: Sequelize.HasManyHasAssociationMixin<tarea, tareaId>;
    hasTareas: Sequelize.HasManyHasAssociationsMixin<tarea, tareaId>;
    countTareas: Sequelize.HasManyCountAssociationsMixin;
    tareaplaneadas: tareaplaneada[];
    getTareaplaneadas: Sequelize.HasManyGetAssociationsMixin<tareaplaneada>;
    setTareaplaneadas: Sequelize.HasManySetAssociationsMixin<tareaplaneada, tareaplaneadaId>;
    addTareaplaneada: Sequelize.HasManyAddAssociationMixin<tareaplaneada, tareaplaneadaId>;
    addTareaplaneadas: Sequelize.HasManyAddAssociationsMixin<tareaplaneada, tareaplaneadaId>;
    createTareaplaneada: Sequelize.HasManyCreateAssociationMixin<tareaplaneada>;
    removeTareaplaneada: Sequelize.HasManyRemoveAssociationMixin<tareaplaneada, tareaplaneadaId>;
    removeTareaplaneadas: Sequelize.HasManyRemoveAssociationsMixin<tareaplaneada, tareaplaneadaId>;
    hasTareaplaneada: Sequelize.HasManyHasAssociationMixin<tareaplaneada, tareaplaneadaId>;
    hasTareaplaneadas: Sequelize.HasManyHasAssociationsMixin<tareaplaneada, tareaplaneadaId>;
    countTareaplaneadas: Sequelize.HasManyCountAssociationsMixin;
    Usuario_idUsuario_usuario: usuario;
    getUsuario_idUsuario_usuario: Sequelize.BelongsToGetAssociationMixin<usuario>;
    setUsuario_idUsuario_usuario: Sequelize.BelongsToSetAssociationMixin<usuario, usuarioId>;
    createUsuario_idUsuario_usuario: Sequelize.BelongsToCreateAssociationMixin<usuario>;
    static initModel(sequelize: Sequelize.Sequelize): typeof responsable;
}
//# sourceMappingURL=responsable.d.ts.map